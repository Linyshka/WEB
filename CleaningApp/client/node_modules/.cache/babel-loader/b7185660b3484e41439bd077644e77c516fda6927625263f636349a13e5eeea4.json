{"ast":null,"code":"var _jsxFileName = \"/home/alina/WEB/CleaningApp/client/src/pages/Services/Services.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport Filters from \"../../components/Filters\";\nimport \"./Services.css\";\nimport ServiceList from \"../../components/ServiceList\";\nimport { Context } from \"../..\";\nimport { getServices } from '../../http/serviceAPI';\nimport Pages from '../../components/Pages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Services = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    service\n  } = useContext(Context);\n  useEffect(() => {\n    getServices(service.page, service.limit, service.query).then(data => {\n      if (service.priceAsc) {\n        service.setServices(data.rows.sort((a, b) => a.price - b.price));\n      } else if (service.priceDesc) {\n        service.setServices(data.rows.sort((a, b) => b.price - a.price));\n      } else if (service.nameAsc) {\n        service.setServices(data.rows.sort((a, b) => a.title - b.price));\n      } else if (service.nameDesc) {\n        service.setServices(data.rows.sort((a, b) => b.price - a.price));\n      }\n      service.setTotalService(data.count);\n    });\n  }, [service, service.page, service.query, service.filters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container services-container\",\n    children: [/*#__PURE__*/_jsxDEV(Filters, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServiceList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}, \"vmKnEmQko8Hb4d05lYj0gAY/z9Y=\")), \"vmKnEmQko8Hb4d05lYj0gAY/z9Y=\");\n_c2 = Services;\nexport default Services;\nvar _c, _c2;\n$RefreshReg$(_c, \"Services$observer\");\n$RefreshReg$(_c2, \"Services\");","map":{"version":3,"names":["React","useContext","useEffect","observer","Filters","ServiceList","Context","getServices","Pages","jsxDEV","_jsxDEV","Services","_s","_c","service","page","limit","query","then","data","priceAsc","setServices","rows","sort","a","b","price","priceDesc","nameAsc","title","nameDesc","setTotalService","count","filters","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/alina/WEB/CleaningApp/client/src/pages/Services/Services.jsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport Filters from \"../../components/Filters\";\n\nimport \"./Services.css\";\nimport ServiceList from \"../../components/ServiceList\";\nimport { Context } from \"../..\";\nimport { getServices } from '../../http/serviceAPI';\nimport Pages from '../../components/Pages';\n\nconst Services = observer(() => {\n  const { service } = useContext(Context);\n\n  useEffect(() => {\n    getServices(service.page, service.limit, service.query).then((data) => {\n      if(service.priceAsc) {\n        service.setServices(data.rows.sort((a, b) => a.price - b.price));\n      } else if(service.priceDesc) {\n        service.setServices(data.rows.sort((a, b) => b.price - a.price));\n      } else if (service.nameAsc) {\n        service.setServices(data.rows.sort((a, b) => a.title - b.price));\n      } else if(service.nameDesc) {\n        service.setServices(data.rows.sort((a, b) => b.price - a.price));\n      }\n      service.setTotalService(data.count)});\n  }, [service, service.page, service.query, service.filters]);\n\n  return (\n    <div className='container services-container'>\n      <Filters />\n      <ServiceList />\n      <Pages />\n    </div>\n  );\n});\n\nexport default Services;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,OAAO,MAAM,0BAA0B;AAE9C,OAAO,gBAAgB;AACvB,OAAOC,WAAW,MAAM,8BAA8B;AACtD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,WAAW,QAAQ,uBAAuB;AACnD,OAAOC,KAAK,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,QAAQ,GAAAC,EAAA,CAAGT,QAAQ,CAAAU,EAAA,GAAAD,EAAA,CAAC,MAAM;EAAAA,EAAA;EAC9B,MAAM;IAAEE;EAAQ,CAAC,GAAGb,UAAU,CAACK,OAAO,CAAC;EAEvCJ,SAAS,CAAC,MAAM;IACdK,WAAW,CAACO,OAAO,CAACC,IAAI,EAAED,OAAO,CAACE,KAAK,EAAEF,OAAO,CAACG,KAAK,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MACrE,IAAGL,OAAO,CAACM,QAAQ,EAAE;QACnBN,OAAO,CAACO,WAAW,CAACF,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,CAAC;MAClE,CAAC,MAAM,IAAGZ,OAAO,CAACa,SAAS,EAAE;QAC3Bb,OAAO,CAACO,WAAW,CAACF,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK,CAAC,CAAC;MAClE,CAAC,MAAM,IAAIZ,OAAO,CAACc,OAAO,EAAE;QAC1Bd,OAAO,CAACO,WAAW,CAACF,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACK,KAAK,GAAGJ,CAAC,CAACC,KAAK,CAAC,CAAC;MAClE,CAAC,MAAM,IAAGZ,OAAO,CAACgB,QAAQ,EAAE;QAC1BhB,OAAO,CAACO,WAAW,CAACF,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK,CAAC,CAAC;MAClE;MACAZ,OAAO,CAACiB,eAAe,CAACZ,IAAI,CAACa,KAAK,CAAC;IAAA,CAAC,CAAC;EACzC,CAAC,EAAE,CAAClB,OAAO,EAAEA,OAAO,CAACC,IAAI,EAAED,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACmB,OAAO,CAAC,CAAC;EAE3D,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,8BAA8B;IAAAC,QAAA,gBAC3CzB,OAAA,CAACN,OAAO;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACX7B,OAAA,CAACL,WAAW;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACf7B,OAAA,CAACF,KAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC,kCAAC;AAACC,GAAA,GAxBG7B,QAAQ;AA0Bd,eAAeA,QAAQ;AAAC,IAAAE,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}